package org.openbw.mapeditor.model.tiles;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openbw.mapeditor.data.DataLayerException;
import org.openbw.mapeditor.data.TilesetDAO;
import org.openbw.mapeditor.model.Settings;

import javafx.scene.image.Image;

public class Tileset {

	private static final Logger LOGGER = LogManager.getLogger();
	
	public static final int NUMBER_OF_TEXTURES = 14;
	public static String[] TEXTURE_NAMES = {"low-ground empty", "low-ground primary", "low-ground secondary", "low-ground tertiary", "low-ground primary non-buildable", "low-ground secondary non-buildable", "low-ground / primary elevated", "low-ground / primary elevated high", "high-ground / primary", "high-ground / secondary", "high-ground / primary non-buildable", "high-ground / primary elevated", "high-ground / primary elevated high", "creep"};
	
	private static final int[][] MASKS = new int[][] {
		{0, 0, 0, 64, 64},
		{1, 0, 32, 64, 32},
		{2, 32, 0, 32, 64},
		{3, 64, 32, 0, 32},
		{4, 32, 64, 32, 0},
		{5, 16, 64, 64, 32},
		{6, 0, 32, 48, 64},
		{7, 64, 32, 16, 0},
		{8, 48, 0, 0, 32},
		{9, 0, 32, 16, 0},
		{10, 48, 0, 64, 32},
		{11, 16, 64, 0, 32},
		{12, 64, 32, 48, 64},
		{13, 0, 32, 64, 0},
		{14, 64, 64, 0, 32},
		{15, 64, 32, 0, 0},
		{16, 0, 64, 64, 32},
		{17, 0, 32, 32, 0},
		{18, 0, 32, 32, 64},
		{19, 32, 0, 64, 32},
		{20, 32, 64, 64, 32},
		{21, 64, 32, 16, 64},
		{22, 48, 64, 0, 32},
		{23, 16, 0, 64, 32},
		{24, 0, 32, 48, 0}
		
	};
	
	private static final int[][] MAPPING = new int[][] {
			{0, -1, -1, -1},
			{1, 13, 13, 0},
			{2, 2, 2, 0},
			{3, 2, 2, 0},
			{4, 9, 9, 0},
			{5, 9, 9, 0},
			{6, 0, 0, 0},
			{7, 0, 0, 0},
			{8, 1, 1, 0},
			{9, 1, 1, 0},
			{10, 5, 5, 0},
			{11, 5, 5, 0},
			{12, 6, 6, 0},
			{13, 6, 6, 0},
			{14, 4, 4, 0},
			{15, 4, 4, 0},
			{16, 7, 7, 0},
			{17, 7, 7, 0},
			{18, 8, 8, 0},
			{19, 8, 8, 0},
			{20, 10, 10, 0},
			{21, 10, 10, 0},
			{22, 11, 11, 0},
			{23, 11, 11, 0},
			{24, 12, 12, 0},
			{25, 12, 12, 0},
			{26, 3, 3, 0},
			{27, 3, 3, 0},
			{28, 2, 2, 0},
			{29, 2, 2, 0},
			{30, 2, 2, 0},
			{31, 2, 2, 0},
			{32, 2, 2, 0},
			{33, 2, 2, 0},
			{34, 2, 2, 0},
			{35, 2, 2, 0},
			{36, -1, -1, -1},
			{37, -1, -1, -1},
			{38, -1, -1, -1},
			{39, -1, -1, -1},
			{40, -1, -1, -1},
			{41, -1, -1, -1},
			{42, -1, -1, -1},
			{43, -1, -1, -1},
			{44, -1, -1, -1},
			{45, -1, -1, -1},
			{46, -1, -1, -1},
			{47, -1, -1, -1},
			{48, -1, -1, -1},
			{49, -1, -1, -1},
			{50, -1, -1, -1},
			{51, -1, -1, -1},
			{52, -1, -1, -1},
			{53, -1, -1, -1},
			{54, -1, -1, -1},
			{55, -1, -1, -1},
			{56, -1, -1, -1},
			{57, -1, -1, -1},
			{58, -1, -1, -1},
			{59, -1, -1, -1},
			{60, -1, -1, -1},
			{61, -1, -1, -1},
			{62, -1, -1, -1},
			{63, -1, -1, -1},
			{64, -1, -1, -1},
			{65, -1, -1, -1},
			{66, -1, -1, -1},
			{67, -1, -1, -1},
			{68, -1, -1, -1},
			{69, -1, -1, -1},
			{70, -1, -1, -1},
			{71, -1, -1, -1},
			{72, -1, -1, -1},
			{73, -1, -1, -1},
			{74, -1, -1, -1},
			{75, -1, -1, -1},
			{76, -1, -1, -1},
			{77, -1, -1, -1},
			{78, -1, -1, -1},
			{79, -1, -1, -1},
			{80, -1, -1, -1},
			{81, -1, -1, -1},
			{82, -1, -1, -1},
			{83, -1, -1, -1},
			{84, -1, -1, -1},
			{85, -1, -1, -1},
			{86, -1, -1, -1},
			{87, -1, -1, -1},
			{88, -1, -1, -1},
			{89, -1, -1, -1},
			{90, -1, -1, -1},
			{91, -1, -1, -1},
			{92, -1, -1, -1},
			{93, -1, -1, -1},
			{94, -1, -1, -1},
			{95, -1, -1, -1},
			{96, -1, -1, -1},
			{97, -1, -1, -1},
			{98, -1, -1, -1},
			{99, -1, -1, -1},
			{100, -1, -1, -1},
			{101, -1, -1, -1},
			{102, -1, -1, -1},
			{103, -1, -1, -1},
			{104, -1, -1, -1},
			{105, -1, -1, -1},
			{106, -1, -1, -1},
			{107, -1, -1, -1},
			{108, -1, -1, -1},
			{109, -1, -1, -1},
			{110, -1, -1, -1},
			{111, -1, -1, -1},
			{112, -1, -1, -1},
			{113, -1, -1, -1},
			{114, -1, -1, -1},
			{115, -1, -1, -1},
			{116, -1, -1, -1},
			{117, -1, -1, -1},
			{118, -1, -1, -1},
			{119, -1, -1, -1},
			{120, -1, -1, -1},
			{121, -1, -1, -1},
			{122, -1, -1, -1},
			{123, -1, -1, -1},
			{124, -1, -1, -1},
			{125, -1, -1, -1},
			{126, -1, -1, -1},
			{127, -1, -1, -1},
			{128, -1, -1, -1},
			{129, -1, -1, -1},
			{130, -1, -1, -1},
			{131, -1, -1, -1},
			{132, -1, -1, -1},
			{133, -1, -1, -1},
			{134, -1, -1, -1},
			{135, -1, -1, -1},
			{136, -1, -1, -1},
			{137, -1, -1, -1},
			{138, -1, -1, -1},
			{139, -1, -1, -1},
			{140, -1, -1, -1},
			{141, -1, -1, -1},
			{142, -1, -1, -1},
			{143, -1, -1, -1},
			{144, -1, -1, -1},
			{145, -1, -1, -1},
			{146, -1, -1, -1},
			{147, -1, -1, -1},
			{148, -1, -1, -1},
			{149, -1, -1, -1},
			{150, -1, -1, -1},
			{151, -1, -1, -1},
			{152, -1, -1, -1},
			{153, -1, -1, -1},
			{154, -1, -1, -1},
			{155, -1, -1, -1},
			{156, -1, -1, -1},
			{157, -1, -1, -1},
			{158, -1, -1, -1},
			{159, -1, -1, -1},
			{160, -1, -1, -1},
			{161, -1, -1, -1},
			{162, -1, -1, -1},
			{163, -1, -1, -1},
			{164, -1, -1, -1},
			{165, -1, -1, -1},
			{166, -1, -1, -1},
			{167, -1, -1, -1},
			{168, -1, -1, -1},
			{169, -1, -1, -1},
			{170, -1, -1, -1},
			{171, -1, -1, -1},
			{172, -1, -1, -1},
			{173, -1, -1, -1},
			{174, -1, -1, -1},
			{175, -1, -1, -1},
			{176, -1, -1, -1},
			{177, -1, -1, -1},
			{178, -1, -1, -1},
			{179, -1, -1, -1},
			{180, 1, 3, 5},
			{181, 1, 3, 1},
			{182, 1, 3, 9},
			{183, 1, 3, 0},
			{184, 1, 3, 1},
			{185, 1, 3, 6},
			{186, 1, 3, 0},
			{187, 1, 3, 10},
			{188, 1, 3, 0},
			{189, 1, 3, 12},
			{190, 1, 3, 3},
			{191, 1, 3, 8},
			{192, 1, 3, 11},
			{193, 1, 3, 0},
			{194, 1, 3, 7},
			{195, 1, 3, 3},
			{196, 3, 3, 0},
			{197, 1, 3, 16},
			{198, 3, 3, 0},
			{199, 1, 3, 15},
			{200, 1, 3, 6},
			{201, 3, 3, 0},
			{202, 1, 3, 8},
			{203, 3, 3, 0},
			{204, -1, -1, -1},
			{205, -1, -1, -1},
			{206, -1, -1, -1},
			{207, -1, -1, -1},
			{208, 1, 3, 14},
			{209, 1, 3, 0},
			{210, 1, 3, 13},
			{211, 1, 3, 0},
			{212, -1, -1, -1},
			{213, -1, -1, -1},
			{214, -1, -1, -1},
			{215, -1, -1, -1},
			{216, -1, -1, -1},
			{217, -1, -1, -1},
			{218, -1, -1, -1},
			{219, -1, -1, -1},
			{220, -1, -1, -1},
			{221, -1, -1, -1},
			{222, -1, -1, -1},
			{223, -1, -1, -1},
			{224, -1, -1, -1},
			{225, -1, -1, -1},
			{226, -1, -1, -1},
			{227, -1, -1, -1},
			{228, 8, 9, 5},
			{229, 8, 9, 1},
			{230, 8, 9, 9},
			{231, 8, 9, 0},
			{232, 8, 9, 1},
			{233, 8, 9, 6},
			{234, 8, 9, 0},
			{235, 8, 9, 10},
			{236, 8, 9, 0},
			{237, 8, 9, 12},
			{238, 8, 9, 3},
			{239, 8, 9, 8},
			{240, 8, 9, 11},
			{241, 8, 9, 0},
			{242, 8, 9, 7},
			{243, 8, 9, 3},
			{244, 9, 9, 0},
			{245, 8, 9, 16},
			{246, 9, 9, 0},
			{247, 8, 9, 15},
			{248, 8, 9, 6},
			{249, 9, 9, 0},
			{250, 8, 9, 8},
			{251, 9, 9, 0},
			{252, 8, 9, 0},
			{253, 8, 9, 21},
			{254, 8, 9, 0},
			{255, 8, 9, 23},
			{256, 8, 9, 14},
			{257, 8, 9, 0},
			{258, 8, 9, 13},
			{259, 8, 9, 0},
			{260, -1, -1, -1},
			{261, -1, -1, -1},
			{262, -1, -1, -1},
			{263, -1, -1, -1},
			{264, -1, -1, -1},
			{265, -1, -1, -1},
			{266, -1, -1, -1},
			{267, -1, -1, -1},
			{268, -1, -1, -1},
			{269, -1, -1, -1}
	};
	
	private Image[] textures;
	private TilesetDAO tilesetDAO;
	
	public Tileset(Settings settings) {

		this.textures = new Image[NUMBER_OF_TEXTURES];
		this.tilesetDAO = new TilesetDAO(settings);
	}
	
	public void load() throws DataLayerException {
		
		this.tilesetDAO.load(this);
	}
	
	public Image getTexture(int id) {
		
		if (id >= 0 && id < textures.length) {
			return textures[id];
		} else {
			
			// TODO proper exception handling
			return null;
		}
	}
	
	public void setTexture(int id, Image image) {
		
		if (id >= 0 && id < textures.length) {
			LOGGER.debug("setting texture " + id + ": size " + image.getWidth() + "x" + image.getHeight());
			textures[id] = image;
		}
	}
	
	public int[] getMaskCoordinates(int maskId) {
	
		if (maskId < 0 || maskId >= MASKS.length) {
			maskId = 0;
		}
		return MASKS[maskId];
	}
	
	public Tile indexToTile(int index, int subIndex) {
		
		Tile tile = null;
		
		if (index < MAPPING.length) {
			tile = new Tile(MAPPING[index][1], MAPPING[index][2], MAPPING[index][3]);
		}
		
		// simplify: just use plain tile instead of doodad tiles.
		if (index >= 1116 && index <= 1138) {
			tile = new Tile(9, 9, 0);
		}
		
		return tile;
	}
}
